architectury {
    common rootProject.enabled_platforms.split(',')
}

loom.accessWidenerPath.set(file("src/main/resources/oritech.accesswidener"))

dependencies {
    // We depend on Fabric Loader here to use the Fabric @Environment annotations,
    // which get remapped to the correct annotations on each platform.
    // Do NOT use other classes from Fabric Loader.
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury:$rootProject.architectury_api_version"

    // fabric api (or FFAPI in neoforge)
    modImplementation "net.fabricmc.fabric-api:fabric-api:0.102.1+1.21.1"

    // owo lib (or owo-lib-neoforge)
    modImplementation "io.wispforest:owo-lib:0.12.15+1.21"
    annotationProcessor modImplementation("io.wispforest:owo-lib:0.12.15+1.21")

    // common storage lib (for energy api)
    modCompileOnly "earth.terrarium.common_storage_lib:common-storage-lib-common-1.21:0.0.5"
    // modRuntimeOnly "earth.terrarium.common_storage_lib:common-storage-lib-fabric-1.21:0.0.5"

    // geckolib
    modImplementation "software.bernie.geckolib:geckolib-fabric-1.21.1:4.6.6"

    // EMI
    modCompileOnly "dev.emi:emi-xplat-intermediary:1.1.12+1.21:api"

    // REI
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api:16.0.754"

    // JADE (needed for addon)
    modImplementation "curse.maven:jade-324717:5639994"
}

sourceSets {
    main {
        resources.srcDir "src/main/generated"
        resources.exclude ".cache"
    }
}

tasks.withType(AbstractCopyTask).configureEach {
    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
